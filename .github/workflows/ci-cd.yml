name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/holistic-health-os

jobs:
  # Run linting and tests for all services
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service, integration-service]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'services/${{ matrix.service }}/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd services/${{ matrix.service }}
          npm ci
      
      - name: Lint code
        run: |
          cd services/${{ matrix.service }}
          npm run lint
        continue-on-error: false
      
      - name: Run tests
        run: |
          cd services/${{ matrix.service }}
          npm test
        continue-on-error: false

  # Build and push docker images for all services
  build-and-push:
    needs: lint-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service, integration-service, analytics-service, ai-service, notification-service, queue-service]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set environment variables
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "ENV_NAME=production" >> $GITHUB_ENV
            echo "VERSION=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          else
            echo "ENV_NAME=staging" >> $GITHUB_ENV
            echo "VERSION=dev-$(date +'%Y%m%d')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: services/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest
          build-args: |
            NODE_ENV=${{ env.ENV_NAME }}
      
      - name: Store image reference for deployment
        if: matrix.service == 'api-gateway'  # Only do this once
        run: |
          echo "VERSION=${{ env.VERSION }}" > version.txt
      
      - name: Upload version info
        if: matrix.service == 'api-gateway'  # Only do this once
        uses: actions/upload-artifact@v3
        with:
          name: version-info
          path: version.txt

  # Deploy to staging on 'develop' branch push
  deploy-staging:
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download version info
        uses: actions/download-artifact@v3
        with:
          name: version-info
      
      - name: Set environment variables
        run: |
          source version.txt
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "REGISTRY_URL=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}" >> $GITHUB_ENV
      
      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
      
      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      
      - name: Deploy to Staging
        run: |
          cd production/k8s/overlays/staging
          kustomize edit set image ${REGISTRY_URL}/api-gateway=${REGISTRY_URL}/api-gateway:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/auth-service=${REGISTRY_URL}/auth-service:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/user-service=${REGISTRY_URL}/user-service:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/integration-service=${REGISTRY_URL}/integration-service:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/analytics-service=${REGISTRY_URL}/analytics-service:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/ai-service=${REGISTRY_URL}/ai-service:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/notification-service=${REGISTRY_URL}/notification-service:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/queue-service=${REGISTRY_URL}/queue-service:${VERSION}
          
          kustomize build | kubectl apply -f -
          kubectl rollout status deployment/api-gateway -n holistic-health-staging
          
          echo "✅ Deployment to staging complete!"

  # Deploy to production on 'main' branch push
  deploy-production:
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download version info
        uses: actions/download-artifact@v3
        with:
          name: version-info
      
      - name: Set environment variables
        run: |
          source version.txt
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "REGISTRY_URL=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}" >> $GITHUB_ENV
      
      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
      
      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      
      - name: Deploy to Production
        run: |
          cd production/k8s/overlays/production
          kustomize edit set image ${REGISTRY_URL}/api-gateway=${REGISTRY_URL}/api-gateway:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/auth-service=${REGISTRY_URL}/auth-service:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/user-service=${REGISTRY_URL}/user-service:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/integration-service=${REGISTRY_URL}/integration-service:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/analytics-service=${REGISTRY_URL}/analytics-service:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/ai-service=${REGISTRY_URL}/ai-service:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/notification-service=${REGISTRY_URL}/notification-service:${VERSION}
          kustomize edit set image ${REGISTRY_URL}/queue-service=${REGISTRY_URL}/queue-service:${VERSION}
          
          # Apply the manifests
          kustomize build | kubectl apply -f -
          
          # Wait for rollout to complete
          kubectl rollout status deployment/api-gateway -n holistic-health-prod
          
          echo "✅ Deployment to production complete!"